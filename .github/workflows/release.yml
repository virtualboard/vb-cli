name: Build, Test, and Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  GO_VERSION: "1.25"
  BINARY_NAME: "vb"

jobs:
  test:
    name: Test and Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests with coverage
        run: make test

      - name: Run security scan
        run: make scan

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: success()
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build for all platforms
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: darwin
            goarch: amd64
            platform: macos-amd64
          - goos: darwin
            goarch: arm64
            platform: macos-arm64
          - goos: windows
            goarch: amd64
            platform: windows-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o dist/${{ env.BINARY_NAME }}-${{ matrix.platform }} .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.platform }}
          path: dist/${{ env.BINARY_NAME }}-${{ matrix.platform }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Process each artifact directory
          for artifact_dir in ${{ env.BINARY_NAME }}-*; do
            if [ -d "$artifact_dir" ]; then
              # Extract platform from directory name (e.g., vb-linux-amd64 -> linux-amd64)
              platform=${artifact_dir#${{ env.BINARY_NAME }}-}

              # The binary file should be directly in the artifact directory
              binary_file="$artifact_dir/${{ env.BINARY_NAME }}-$platform"

              if [ -f "$binary_file" ]; then
                # Add .exe extension for Windows
                if [[ "$platform" == *"windows"* ]]; then
                  cp "$binary_file" "release-assets/${{ env.BINARY_NAME }}-$platform.exe"
                else
                  # Copy binary directly for Unix-like systems
                  cp "$binary_file" "release-assets/${{ env.BINARY_NAME }}-$platform"
                fi
              fi
            fi
          done

          # Create checksums only if there are files
          cd release-assets
          if [ "$(ls -A .)" ]; then
            sha256sum ./* > checksums.txt
          else
            echo "No files found in release-assets directory"
            exit 1
          fi
          cd ..

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from code (more reliable than tag name)
          VERSION=$(grep 'const Current = ' internal/version/version.go | sed 's/.*"\(.*\)".*/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Generate changelog from git commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG"..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --max-count=10)
          fi

          # Create release notes
          cat > release-notes.md << EOF
          ## Changes in $VERSION

          $CHANGELOG

          ## Installation

          Download the appropriate binary for your platform:

          - **Linux AMD64**: \`${{ env.BINARY_NAME }}-linux-amd64\`
          - **Linux ARM64**: \`${{ env.BINARY_NAME }}-linux-arm64\`
          - **macOS AMD64**: \`${{ env.BINARY_NAME }}-macos-amd64\`
          - **macOS ARM64**: \`${{ env.BINARY_NAME }}-macos-arm64\`
          - **Windows AMD64**: \`${{ env.BINARY_NAME }}-windows-amd64.exe\`

          ## Verification

          Verify the integrity of downloaded files using the provided checksums:

          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          EOF

          {
            echo "changelog<<EOF"
            cat release-notes.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog.outputs.version }}
          name: Release ${{ steps.changelog.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  # homebrew:
  #   name: Update Homebrew Formula
  #   needs: release
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc')
  #   steps:
  #     - name: Checkout homebrew-tap
  #       uses: actions/checkout@v5
  #       with:
  #         repository: ${{ github.repository_owner }}/homebrew-tap
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         path: homebrew-tap

  #     - name: Update formula
  #       run: |
  #         VERSION=$(grep 'const Current = ' internal/version/version.go | sed 's/.*"\(.*\)".*/\1/')
  #         BINARY_NAME="${{ env.BINARY_NAME }}"

  #         # Download the macOS ARM64 binary to calculate SHA256
  #         curl -L -o "$BINARY_NAME-macos-arm64" "https://github.com/${{ github.repository }}/releases/download/$VERSION/$BINARY_NAME-macos-arm64"
  #         SHA256=$(sha256sum "$BINARY_NAME-macos-arm64" | cut -d' ' -f1)

  #         # Create or update the formula
  #         cat > homebrew-tap/Formula/$BINARY_NAME.rb << EOF
  #         class Vb < Formula
  #           desc "Virtual Board CLI - A command-line tool for managing virtual boards"
  #           homepage "https://github.com/${{ github.repository }}"
  #           url "https://github.com/${{ github.repository }}/archive/$VERSION.tar.gz"
  #           sha256 "$SHA256"
  #           license "MIT"

  #           depends_on "go" => :build

  #           def install
  #             system "go", "build", *std_go_args(ldflags: "-s -w -X main.version=$VERSION"), "."
  #           end

  #           test do
  #             system "\#{bin}/$BINARY_NAME", "version"
  #           end
  #         end
  #         EOF

  #     - name: Commit and push changes
  #       run: |
  #         cd homebrew-tap
  #         git config --local user.email "action@github.com"
  #         git config --local user.name "GitHub Action"
  #         git add .
  #         git diff --staged --quiet || git commit -m "Update ${{ env.BINARY_NAME }} to ${{ github.ref_name }}"
  #         git push
